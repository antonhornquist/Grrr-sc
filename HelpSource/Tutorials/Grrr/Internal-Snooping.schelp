title:: Debugging and Internal Snooping in the Grrr library
summary:: Debugging and Internal Snooping in the Grrr library
categories:: External Control
related:: Overviews/Grrr

section::Debugging and Internal Snooping

Views may be indicated meaning its bounds shown with a continuous flash on the controller to which it is attached.

code::
b=GRButton(a, 1@3);
c=GRButton(a, 2@0);
b.indicateView;
c.indicateView;

a.view.removeAllChildren;
::

Views are indicated regardless of whether they're enabled or not.

code::
a=GRScreenGrid.new;
b=GRButton.new(a, 0@0);
b.flashView;
b.indicateView;
b.disable;
b.flashPoint; // will not make any difference
b.indicateView; // still flashes leds
::

Using a GRCommon class variable views may automatically be indicated when added/removed to a controller. Automatic indications are nice hints when prototyping a UI or creating an ad hoc UI when live coding.

code::
GRCommon.indicateAddedRemovedAttachedDetached=true;

b=GRButton(a, 1@3);
c=GRButton(a, 2@0);
b.remove;
c.remove;

// However, the global should in other cases be set to false (the default) for indications not to happen all the time.
GRCommon.indicateAddedRemovedAttachedDetached=false;
::

With globals Grrr button and led events may be traced

code::
GRCommon.traceButtonEvents=true;
a=GRContainerView.newDetached(4, 4);
b=GRButton(a, 1@3);
a.press(this, 1@3);
a.press(this, 0@0);
a.release(this, 1@3);
a.release(this, 0@0);
GRCommon.traceButtonEvents=false; // the default

GRCommon.traceLedEvents=true;
b=GRButton(a, 1@3);
b.value = true;
b.value = false;
GRCommon.traceLedEvents=false; // the default
b.remove
::

It's possible to post textual representations of views to the Post Window.

code::
b=GRContainerView(a, 0@0, 4, 4);
c=GRMultiButtonView(b, 0@0, 4, 4);
a.postTree // post a tree of all contained views

a.plot // plot a view or controller
b.plot // plot container view
a.plotTree // plot a view or controller and all its contained views recursively

a.view.removeAllChildren;
::
