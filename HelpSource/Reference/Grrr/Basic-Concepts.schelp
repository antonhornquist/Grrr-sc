title:: Basic Concepts
summary:: Basic Concepts
categories:: External Control
related:: Overviews/Grrr

Grrr is an UI library for grid based controllers.

The Grrr class library is loosely based on the SuperCollider GUI class library. link::Classes/GRController:: is similar to link::Classes/Window::, link::Classes/GRView:: and its subclasses are similar to link::Classes/View:: and its subclasses. Using Grrr will be familiar to those who has created SuperCollider GUIs.

section::Adding views to a controller

A parent is typically passed to a GRView upon instantiation to indicate which controller or view the view will become a child of. This is much like when building regular SuperCollider GUI. However, instead of SuperCollider GUI bounds (a Rect supplied to GUI Views) arguments origin (a Point), numCols and numRows (Integers) designate where on the parent view or controller a Grrr widget is added and how large it will be.

code::
a=GRScreenGrid.new; // a GRScreenGrid is a virtual grid with configurable size that defaults to 8x8
b=GRButton(a, 0@0, 2, 2); // a button spanning 2x2 keys is placed at top left key on the virtual grid
b.action = { |view, value| (value.if("Hello", "Goodbye") + "World").postln }; // sets an action to be triggered when the button is pressed

// pressing the top-leftmost 2x2 grid keys will now post a message to the Post Window and toggle the button's value which in turn toggles led state

b.value = true; // set value programmatically
b.value = false;

b.valueAction = true; // valueAction sets value *and* triggers action
b.valueAction = false;

b.toggleValue; // toggle value and trigger action, this is the action coupled GRButton presses trigger

b.remove; // remove the button from the screen grid

a.view.removeAllChildren; // can be used to remove all children
::

section::Enabling and disabling views

GRViews may be enabled or disabled individually. Disabled views do not display led state nor handle button events from it's parent.

code::
a=GRScreenGrid.new;
b=GRButton(a, 0@0); // a 1x1 (the default size) button placed at top left key
b.value = true;
b.disable; // button led disappear when a view is disabled and key events are no longer handled
b.enable; // enable button again to

b.remove; // remove the button from the screen grid
::

section::Nesting views

GRContainerView may be used to group other views.

code::
a=GRScreenGrid.new;
b=GRContainerView(a, 0@0, 4, 4);
c=GRMultiButtonView(b, 0@0, 4, 4);
c.action = { |view| ("i'm in" + view.getParents).postln };
a.postTree; // postTree prints a textual representation of the view tree to the Post Window

d=GRContainerView(a, 4@0, 4, 4);
e=GRContainerView(d, 0@0, 2, 2);
f=GRButton(e, 0@0, 2, 2);
f.action = { |view| ("i'm in" + view.getParents).postln };
a.postTree;
::

GRContainerView provides methods for switching between the views it contain.

code::
a=GRScreenGrid.new;
(
b=GRContainerView(a, 0@0, 4, 4);
c=4.collect { GRMultiButtonView(b, 0@0, 4, 4) }; // create four 4x4 views in the GRContainerView
)

c[0].bringToFront; // switch between views
c[1].bringToFront;
c[2].bringToFront;
c[3].bringToFront;

(
c[0].bringToFront;
d=GRHToggle(a, 0@4, 4, 1); // a toggle can be used to switch between views
d.action = { |view, value| c[value].bringToFront };
)
::

section::Coupled vs decoupled views

Grrr widgets may be used in a coupled or decoupled fashion. Coupled views automatically updates a widget's value on incoming key events. This is the default, and how how regular GUI views work. Decoupled views do not update a widget's value on incoming key events. A widget's value mostly correspond to the state of the leds of the widget. Decoupled views require a bit more code but is arguably more useful since key presses may be customized to not directly correspond to how a widget normally works.

code::
a=GRScreenGrid.new;
s.boot;
b=GRHToggle(a, 0@0, 8, 1); // a coupled toggle
c=GRHToggle.newDecoupled(a, 0@1, 8, 1); // a decoupled one

b.action = { |view, value| s.serverRunning.if { (degree: value, sustain: 0.05).play } }; // coupled toggle plays sound

// Widget specific non-led-coupled actions are typically used with decoupled views
(
c.togglePressedAction = { |...args| // togglePressedAction is triggered anytime toggle is pressed anywhere
	c.value = c.numCols.rand; // randomize value on toggle press
};
)

// Something a bit more interesting: a sequence of different length triggered from the toggle
(
c.togglePressedAction = nil;
c.toggleValuePressedAction = { |view, value| // toggleValuePressedAction is triggered anytime a toggle value is pressed
	var playFunc;
	playFunc = { |degree| s.serverRunning.if { (degree: degree, sustain: 0.05).play } };
	r.stop;
	r = Routine({
		loop {
			(value..0).do { |val|
				0.1.wait;
				playFunc.(val);
				view.value = val;
			};
		};
	}).play;
};
)

r.stop; // stop the sequence
::

In addition to using the newDecoupled constructor it's possible to set a widget coupled or decoupled using the coupled_() method.

section::Detached views

A view is typically created as a child to another view acting as a parent view. When a view has a parent it is considered attached. It's possible to create detached views and attach them at a later stage.

code::
a=GRScreenGrid.new;
b=GRButton(a, 0@0);
b.hasParent; // true
c=GRButton.newDetached;
c.hasParent; // false
c.isDetached; // true
a.addChild(c, 1@1);
c.hasParent; // true
c.isDetached; // false
::

It's also possible to detach a view from a parent and reattach them to another parent.

code::
// Example code
a=GRScreenGrid.new;
b=GRButton(a, 0@0);
b.hasParent; // true
b.remove;
b.hasParent; // false
c=GRScreenGrid.new;
c.addChild(b, 3@3);
b.hasParent; // true
::

